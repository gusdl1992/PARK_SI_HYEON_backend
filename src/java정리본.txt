기계어 : 컴퓨터가 이해 할 수 있는 언어 / 2진코드(바이너리코드) / 0,1
	- 고급언어 : 사람이 이해 할 수 있는 언어.
		- C , C++ , JAVA , C# , 파이썬
	- 저급언어 : 컴퓨터가 이해 할 수 있는 언어.
		- 어셈블리어


- 실행과정
	사람(문자) ------- JAVA문법 ---------> 소스파일( .JAVA)  --------> 컴파일 -----> 기계어파일( .class ) -------> 컴퓨터
- 특징
	1. 모든 운영체제에서 실행가능 
		- 기계어 사용하기 때문에
	2. 객체 지향 프로그래밍
		- 부품을 만들고 부품들을 연결해서 더 큰 프로그램 완성 (ex) 레고 모듈
	3. 메모리 자동 정리
		- Garbage Collection ( GC 가비지컬렉션) : 사용하지 않는 메모리를 자동으로 초기화/제거
	4. 무료 라이브러리 풍부
		- 미리 만들어진 함수/클래스 들을 제공 함으로써 빠른개발/협업 도움 ex) 스프링 프레임워크

- JDK : 자바 개발 도구
	- JAVA 문법 과 기본 라이브러리를 가지고 있는 파일
	- 버전 : JDK8 , JDK11 , JDK17(강의)
	- 스프링3.0 이상부터 JDK17 이상 지원 ( 전자정부프레임워크 1.8 다수 )
		- JDK17에 JDK8 포함

- 텍스트 에디터
	- 각 언어별 자동완성 / 개발 도움을 주는 환경 / 기능
	1. Visual Studio Code (프론트엔드 개발자가 많이 사용 )	: 프론트엔드 수업
	2. IntelliJ IDEA ( 일반기업/프리랜서 가장 인기 )		: 백엔드 수업
		- IntelliJ IDEA Ultimate : 유료버전
		- IntelliJ IDEA Community Edition : 무료버전
		- IntelliJ IDEA Community Edition 2023.3.2 [강의]
	3. Eclipse ( 백엔드 가장 인기 ) 			: 전면 무료



	---------------------------------------------------------------------------------------------------
	p.34
	    - 변수 : 하나의 값을 저장할 수 있는 메모리 번지에 붙어진 이름
	        - 사용하는 이유
	            1. 하나의 값을 저장 [ 나중에 사용 가능 ]
	    - 변수 선언
	    1. 타입
	        - 기본자료형 8가지 존재
	            - 사용하는 이유 : 단점(암기) 장점( 데이터타입가독성 , 실수/오류 , *메모리 효율성 )
	                - 사탕 1개 선물 --> 사탕 크기 맞게 상자를 골라야한다.  [ 빈 공간이 최대한 없도록 ]
	                - 숫자 10을 저장 --> 숫자10 크기에 맞게 상자를 골라써야한다.
	                - 데이터 1byte --> byte 타입 사용.
	        - 정수형 타입
	            byte , short , int , long
	        - 실수형 타입
	            float , double
	        - 불리언 타입
	            boolean
	        - 문자 타입 vs 문자열
	            char
	    2. 이름
	        - 첫글자 소문자인 카멜표기법 권장
	        - 숫자시작 X , 뛰어쓰기X , 특수문자일부만가능
	        - 사용하는 이유 : 메모리 주소값 대신 메모링 위치를 식별하기 위해 문자로 표현 ( 컴퓨터는 저장시 메모리 주소값[16진수] = 사람이 알기 어려워  )
	    3. 대입
	        - =
	    4. 초기값
	        - 타입 범위내 데이터만 저장 가능.!! int 이면 int 범위내 double 이면 double 범위내.


    - 변수 선언 종류
        1. 타입 변수명               [ ★ 아직 메모리 할당 X -> 호출 불가능 ]
        2. 타입 변수명 = 초기값


=======================================================================================================================================

진수 : 데이터 표현하는 진법 단위 (방법론)
    - 표현단위 다형성.
    2진수 : 0 또는 1  <------> 이진코드(바이너리코드) <-----> 기계어
    8진수 : 0 1 2 3 4 5 6 7
    10진수 : 0 1 2 3 4 5 6 7 8 9      <------> 실생활에서 주로 사용
    16진수 : 0 1 2 3 4 5 6 7 8 9 A(10) B C D E F(15)

용량 : 데이터 크기 정보의 단위
    bit / 비트 : 0 또는 1          , 1비트 -> 01010101       -> 8비트 ( 비트 8칸 뜻 )
    *byte / 바이트 : 비트8칸        , 8비트 -> 1바이트        -> 1024바이트
    kb / 킬로바이트 : 1024바이트     , 1024바이트 -> 1킬로바이트 -> 1024킬로바이트
    mb / 메가바이트 : 1024킬로바이트  , 1024킬로바이트 -> 1메가바이트 -> 1024메가바이트
    gb / 기가바이트 : 1024메가바이트  , 1024메가바이트 -> 1기가바이트 -> 1024기가바이트

8가지 기본 자료형[*]
    [ 정수 ]
        1. byte 1바이트 -128 ~ 127
        2. short 2바이트 +- 3만정도
        3. int 4바이트 +- 21억정도 [ * 직접 입력 한값 -> 리터럴 ] - 정수의 기본타입
        4. long 8바이트 +- 21억이상 [ * 리터럴 데이터 뒤에 l / L 붙여 long 타입을 알려줘야한다. ]
            - 정수 리터럴의 기본타입은 int 이므로.
            - 기본자료형으로 표현이 불가능한 범위는 문자열 타입 (클래스)

    [ 문자 ]
        1. char 2바이트 0 ~ 65535 // 유니코드 , ' ' 사용 , unsigned사용[ 부호를 안쓰고 양수만 사용하므로 ]

    [ 문자열/ 참조타입 ]
        1. String 문자길이에따름 , 참조타입/클래스 , " " 사용 , JDK13이상 """ """ 사용

    [ 실수 ]
        1. float    4바이트    7자리유효 [ * 리터럴 데이터 뒤에 f/F 를 붙여 float 타입을 알림 ]
        2. double   8바이트    17자리유효[ * 직접 입력한 값 -> 리터럴 ] - 실수의 기본타입
            - 실수 리터럴의 기본타입은 double 이므로.
            - 자바는 IEEE 754 표준을 이용한 부동소수점 표현 [ 왜?? 컴퓨터는 소수점 몰라요.. ]
            - +부호 m(가수) X 10(지수)

    [ 논리 ]
        1. boolean 1바이트

    - 자바에서 사용하는 리터럴(입력한 데이터 그 자체)
        - 정수(int) , 실수(double) , 논리(boolean) , 문자(char'') , 문자열(String" ")


    이스케이프/제어 문자 [ JS 동일 ]
        - \ 백슬래시 뜻함.
            " : 문자열 형식을 위한 연산기호/기능 들어감
            ' : 문자 형식을 위한 연산기호/기능 들어감
        - \" : " 큰따옴표 문자형식 출력
        - \' : '' 작은따옴표 문자형식 출력
        - \n : 줄바꿈처리
        - \t : 탭
        - \\ : \백슬래시 문자형식 출력
        - \r : 캐리지 리턴[ 맨 앞으로 커서 이동 ]
            - 엔터기능 : \n\r


------------------------------------------------------------
    자바의 데이터 타입 분류 p.144
        - 변수가 값을 가지고 있으면, 기본타입
        - 변수가 (객체) 주소를 가지고 있으면, 참조타입

    1. 기본타입 : 리터럴/값
        - 정수타입 byte , short ,char ,int ,long
        - 실수타입 float , double
        - 논리타입 boolean
    2. 참조타입 : 객체의 번지(주소)를 참조
        - 배열타입      : []
        - 클래스       : String , Scanner , System , Math 등등
        - 인터페이스
        - 열거타입


---------------------------------------------------------------

    코드파일 ( .java ) : 사람들이 만든 문법으로 코드 작성
            실행(컴파일) : javac : 프로그램 (jdk 포함)
    빌드파일 ( .class ) : 바이트코드
            |
            |   클래스 로더
            |


    JVM : 자바 가상머신
    ----------------- Runtime Data Area 메모리(저장)공간 -----------------

    메소드 영역               스택(stack)영역                힙(heap)영역 : 객체가 생성되는 영역
    - 클래스                 - 변수                            - 객체
    - 상수                   - 기본타입
                            - 참조타입  ----------------> 힙영역의 객체 번지를 저장


                            name = 100번지  ----------->  String( String 객체) 100번지
                            hobby = 200번지 ----------->  String( String 객체) 200번지
                            price = 100.5   [리터럴]
                            age = 25        [리터럴]

    - 메소드영역 : 바이트코드 파일의 내용을 저장되는 영역
    - 힙(heap)영역 : 객체가 생성되는 영역
    - 스택(stack)영역 :
            - 스레드마다 스텍영역 할당
            - 메소드 호출 할 때마다 생성되는 프레임들이 저장되는 영역
            - 프레임 내부에는 로컬(지역) 변수가 있다.

    == != : 스택영역 비교 ( 리터럴의 값과 주소 비교)
        int a = 10;                 String a = 100번지
        int b = 10;                 String b = 100번지
        int c= 20;                  String c = 200번지
            a == b true                  a == b true
            b == c false                 b == c false

    .equals() : 힙영역 비교
        . : 접근연산자 : 주소가 있으면 그 주소(힙영역 -> 객체)로 이동해.
        Scanner scanner = new Scanner(System.in)
                                    1. 힙영역[ 102번지 ]
            2. 스택영역 scanner = 102번지
            3. 스택영역에서 힙의 메모리 접근한다. scanner.nextInt()
                scanner(102번지). 메소드 / 필드 접근

==========================================================================
    int a = 10;                     String a = 100번지
    int b = 20;                     String b = 200번지
    int c = a;                      String c = a
        c = 10                          c == 100 번지
        a == c true                     a == c true

    클래스 = 자동차설계도 , 붕어빵틀 , 아파트평면도 , BMW
                            푸르지오 32평 우리집 = 101동 101호
                            푸르지오 32평 옆집  = 101동 102호
            유재석 = 101동 101호
            강호동 = 101동 101호
            서장훈 = null (주소가없다)

                            BMWX5 내차         = 1157
                            BMWX5 친구차       = 4482

            String a = ?????
                a.equals( "유재석" )
                a == null 참조값이 있는지 없는지 확인.
                    a = "유재석"
                        a.equals ("유재석")        [O]

                    a = null
                        a.equals("유재석")         [X]
            - 자바오류 1순위 : nullPointerException -> 주소가 null 일때 사용 하려고하면 발생하는 오류

=============================================================================

    문자열 관련함수
        1. 문자 추출 : 문자열.charAt(인덱스);
            - 매개변수 : 추출문자인덱스 번호 / 리턴값 : 추출된 문자(char)
        2. 문자열 길이 : 문자열.length();
            - 매개변수 : 없음 / 반환값 : 문자열길이(int)
        3. 문자열 대체 : 문자열.replace();
            - 매개변수 : 변경할 문자열 , 새로운문자열 / 반환값 : 대체된새로운문자열(Strong)
        4. 문자열 잘라내기 : 문자열.subString()
            - 매개변수 : (1)   (2) 시작인덱스 , 끝 인덱스   반환타입 : 잘라낸 문자열 추출 (String)
        5. 문자열 찾기 : 문자열.indexOf() vs 문자열.contains()
            - 매개변수 : "찾을문자열" / 반환값 : 찾은 문자열의 인덱스 번호 (int)
            - 매개변수 : "찾을문자열" / 반환값 : 있으면 true , 없으면 false
        6. 문자열 분리 : 문자열.split()
            - 매개변수 : 구분자 // 반환타입 : 배열( 문자열[] )

===============================================================================

    - 프로그램 : 명령어의 집합체
    - 프로세스 : 컴퓨터에서 실행중인 프로그램
    - 스레드 : 프로세스마다 1개이상 필수 존재하는 흐름 읽어주는 단위
        main() : main스레드 포함

        - 스레드1
            - 스택영역                                          힙영역                         메소드영역
                - 프레임1(함수호출)                                - 객체(주소)                    - 클래스 정보
                    - 지역변수1                                     - 필드
                    - 지역변수2
                    - 지역변수3
                - 프레임2(함수호출)
                - 프레임3(함수호출)
        - 스레드2
            스택영역
















